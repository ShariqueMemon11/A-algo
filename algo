
graph= {
    'A': [('B', 6), ('F', 3)],
    'B': [('C', 3), ('D', 2)],
    'C': [('D', 1), ('E', 5)],
    'D': [('C', 1), ('E', 8)],
    'E': [('I', 5), ('J', 5)],
    'F': [('G', 1),('H', 7)] ,
    'G': [('I', 3)],
    'H': [('I', 2)],
    'I': [('E', 5), ('J', 3)],
     
}
def neighbour(v):
    if v in graph:
        return graph[v]
    return None

def h(v):
    h={
        'A': 10,
        'B': 8,
        'C': 5,
        'D': 7,
        'E': 3,
        'F': 6,
        'G': 5,
        'H': 3,
        'I': 1,
        'J': 0            
    }
    return h[v]
    
def astaricalgo(startnode , endnode ):
    openset = set(startnode)
    closeset = set()
    g={}
    parent={}
    g[startnode]=0
    parent[startnode] = startnode
    
    while len(openset) > 0:
        n = None
        
        for v in openset:
            if n == None or g[v] + h(v) < g[n] + h(n):
                n = v
        
        if n == endnode or graph[n] == None:
            pass
        else:
            for (m , weight) in neighbour(n):
                if m not in openset and m not in closeset:
                    g[m]=g[n]+weight
                    parent[m]=n
                    openset.add(m)
                else:
                    if g[m] > g[n] + weight:
                        g[m]=g[n]+weight
                        parent[m]=n
                        if m in closeset:
                            closeset.remove(m)
                            openset.add(m)
        
        if n == None:
            print("Path not found")
            return None
        
        if n == endnode:
            path = []
            
            while parent[n] != n:
                path.append(n)
                n = parent[n]
            
            path.append(startnode)
            path.reverse()
            print("path found {}".format(path))
            return path
        openset.remove(n)
        closeset.add(n)
    print("path not found")
    return None
    
astaricalgo("A" , "J" )
